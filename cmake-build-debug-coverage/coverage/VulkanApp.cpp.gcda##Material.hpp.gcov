        -:    0:Source:/home/wpsimon09/Desktop/LearningVulkan/Vulkan/Includes/Material/Material.hpp
        -:    0:Graph:/home/wpsimon09/Desktop/LearningVulkan/Vulkan/cmake-build-debug-coverage/CMakeFiles/LearnVulkan.dir/Includes/VulkanApp.cpp.gcno
        -:    0:Data:/home/wpsimon09/Desktop/LearningVulkan/Vulkan/cmake-build-debug-coverage/CMakeFiles/LearnVulkan.dir/Includes/VulkanApp.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by wpsimon09 on 24/08/24.
        -:    3://
        -:    4:
        -:    5:#ifndef MATERIAL_HPP
        -:    6:#define MATERIAL_HPP
        -:    7:#include <map>
        -:    8:#include <vector>
        -:    9:#include <vulkan/vulkan_core.h>
        -:   10:
        -:   11:struct Texture {
        -:   12:    VkImage image;
        -:   13:    VkImageView imageView;
        -:   14:    VkDeviceMemory memory;
        -:   15:    VkSampler sampler;
        -:   16:    uint32_t binding;
        -:   17:};
        -:   18:
        -:   19:enum TEXTURE_TYPE {
        -:   20:    TEXTURE_TYPE_ALBEDO = 0,
        -:   21:    TEXTURE_TYPE_ARM = 1,
        -:   22:    TEXTURE_TYPE_NORMAL = 2,
        -:   23:};
        -:   24:
        -:   25:class Material {
        -:   26:public:
        -:   27:    Material(VkDevice &logicalDevic);
        -:   28:
function _ZN8Material11GetTexturesEv called 17 returned 100% blocks executed 100%
       17:   29:    std::map<TEXTURE_TYPE, Texture> &GetTextures(){return this->m_materials;};
       17:   29-block 2
        -:   30:
        -:   31:    std::vector<VkDescriptorSetLayoutBinding> GetLayoutBindings(int startsFrom = 0);
        -:   32:
        -:   33:    VkDescriptorPoolSize GetDescriptorPoolSize(uint32_t MAX_FRAMES_IN_FLIGHT);
        -:   34:
        -:   35:    std::vector<VkWriteDescriptorSet> GetDescriptorWrites(VkDescriptorSet descriptorSet);
        -:   36:
        -:   37:    Texture getAlbedo() {return m_materials[TEXTURE_TYPE_ALBEDO];};
        -:   38:    Texture getArm() {return m_materials[TEXTURE_TYPE_ARM];};
        -:   39:    Texture getNormal() {return m_materials[TEXTURE_TYPE_NORMAL];};
        -:   40:
        -:   41:    ~Material();
        -:   42:private:
        -:   43:    std::vector<VkDescriptorImageInfo> m_descriptorImageInfos;
        -:   44:    VkDevice m_logicalDevice;
        -:   45:    std::map<TEXTURE_TYPE,Texture> m_materials;
        -:   46:};
        -:   47:
        -:   48:
        -:   49:
        -:   50:#endif //MATERIAL_HPP
