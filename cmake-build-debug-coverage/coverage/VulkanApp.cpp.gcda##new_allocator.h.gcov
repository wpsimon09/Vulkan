        -:    0:Source:/usr/include/c++/14/bits/new_allocator.h
        -:    0:Graph:/home/wpsimon09/Desktop/LearningVulkan/Vulkan/cmake-build-debug-coverage/CMakeFiles/LearnVulkan.dir/Includes/VulkanApp.cpp.gcno
        -:    0:Data:/home/wpsimon09/Desktop/LearningVulkan/Vulkan/cmake-build-debug-coverage/CMakeFiles/LearnVulkan.dir/Includes/VulkanApp.cpp.gcda
        -:    0:Runs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2024 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/new_allocator.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{memory}
        -:   28: */
        -:   29:
        -:   30:#ifndef _STD_NEW_ALLOCATOR_H
        -:   31:#define _STD_NEW_ALLOCATOR_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <new>
        -:   35:#include <bits/functexcept.h>
        -:   36:#include <bits/move.h>
        -:   37:#if __cplusplus >= 201103L
        -:   38:#include <type_traits>
        -:   39:#endif
        -:   40:
        -:   41:namespace std _GLIBCXX_VISIBILITY(default)
        -:   42:{
        -:   43:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   44:
        -:   45:  /**
        -:   46:   * @brief  An allocator that uses global `new`, as per C++03 [20.4.1].
        -:   47:   * @ingroup allocators
        -:   48:   *
        -:   49:   * This is precisely the allocator defined in the C++ Standard.
        -:   50:   *   - all allocation calls `operator new`
        -:   51:   *   - all deallocation calls `operator delete`
        -:   52:   *
        -:   53:   * This is the default base-class implementation of `std::allocator`,
        -:   54:   * and is also the base-class of the `__gnu_cxx::new_allocator` extension.
        -:   55:   * You should use either `std::allocator` or `__gnu_cxx::new_allocator`
        -:   56:   * instead of using this directly.
        -:   57:   *
        -:   58:   * @tparam  _Tp  Type of allocated object.
        -:   59:   *
        -:   60:   * @headerfile memory
        -:   61:   */
        -:   62:  template<typename _Tp>
        -:   63:    class __new_allocator
        -:   64:    {
        -:   65:    public:
        -:   66:      typedef _Tp        value_type;
        -:   67:      typedef std::size_t     size_type;
        -:   68:      typedef std::ptrdiff_t  difference_type;
        -:   69:#if __cplusplus <= 201703L
        -:   70:      typedef _Tp*       pointer;
        -:   71:      typedef const _Tp* const_pointer;
        -:   72:      typedef _Tp&       reference;
        -:   73:      typedef const _Tp& const_reference;
        -:   74:
        -:   75:      template<typename _Tp1>
        -:   76:	struct rebind
        -:   77:	{ typedef __new_allocator<_Tp1> other; };
        -:   78:#endif
        -:   79:
        -:   80:#if __cplusplus >= 201103L
        -:   81:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   82:      // 2103. propagate_on_container_move_assignment
        -:   83:      typedef std::true_type propagate_on_container_move_assignment;
        -:   84:#endif
        -:   85:
        -:   86:      __attribute__((__always_inline__))
        -:   87:      _GLIBCXX20_CONSTEXPR
      392:   88:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
        1:   88-block 2
        2:   88-block 2
        1:   88-block 2
        3:   88-block 2
        3:   88-block 2
        1:   88-block 3
        1:   88-block 6
        1:   88-block 2
        1:   88-block 2
        1:   88-block 17
        1:   88-block 32
        1:   88-block 2
        1:   88-block 10
        1:   88-block 3
        3:   88-block 5
        9:   88-block 5
        2:   88-block 3
       17:   88-block 3
        -:   89:
        -:   90:      __attribute__((__always_inline__))
        -:   91:      _GLIBCXX20_CONSTEXPR
      56*:   92:      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
        1:   92-block 2
        1:   92-block 2
        2:   92-block 2
        2:   92-block 2
        1:   92-block 2
        1:   92-block 2
        1:   92-block 2
    %%%%%:   92-block 2
    %%%%%:   92-block 2
    %%%%%:   92-block 2
    %%%%%:   92-block 2
        2:   92-block 2
        2:   92-block 2
       17:   92-block 2
    %%%%%:   92-block 2
    %%%%%:   92-block 2
        1:   92-block 2
        1:   92-block 2
        1:   92-block 2
        2:   92-block 2
    %%%%%:   92-block 2
        2:   92-block 2
       17:   92-block 2
        1:   92-block 2
        -:   93:
        -:   94:      template<typename _Tp1>
        -:   95:	__attribute__((__always_inline__))
        -:   96:	_GLIBCXX20_CONSTEXPR
        -:   97:	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   98:
        -:   99:#if __cplusplus >= 201103L
        -:  100:      __new_allocator& operator=(const __new_allocator&) = default;
        -:  101:#endif
        -:  102:
        -:  103:#if __cplusplus <= 201703L
     438*:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorI17VkLayerPropertiesED2Ev:
function _ZNSt15__new_allocatorI17VkLayerPropertiesED2Ev called 3 returned 100% blocks executed 100%
        3:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIcED2Ev:
function _ZNSt15__new_allocatorIcED2Ev called 349 returned 100% blocks executed 100%
      349:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPKcED2Ev:
function _ZNSt15__new_allocatorIPKcED2Ev called 0 returned 0% blocks executed 0%
    #####:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesED2Ev:
function _ZNSt15__new_allocatorI23VkQueueFamilyPropertiesED2Ev called 51 returned 100% blocks executed 100%
       51:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorI21VkExtensionPropertiesED2Ev:
function _ZNSt15__new_allocatorI21VkExtensionPropertiesED2Ev called 6 returned 100% blocks executed 100%
        6:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorI18VkSurfaceFormatKHRED2Ev:
function _ZNSt15__new_allocatorI18VkSurfaceFormatKHRED2Ev called 3 returned 100% blocks executed 100%
        3:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorI16VkPresentModeKHRED2Ev:
function _ZNSt15__new_allocatorI16VkPresentModeKHRED2Ev called 3 returned 100% blocks executed 100%
        3:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIjED2Ev:
function _ZNSt15__new_allocatorIjED2Ev called 0 returned 0% blocks executed 0%
    #####:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorI6VertexED2Ev:
function _ZNSt15__new_allocatorI6VertexED2Ev called 0 returned 0% blocks executed 0%
    #####:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorI20VkWriteDescriptorSetED2Ev:
function _ZNSt15__new_allocatorI20VkWriteDescriptorSetED2Ev called 2 returned 100% blocks executed 100%
        2:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIP18VkPhysicalDevice_TED2Ev:
function _ZNSt15__new_allocatorIP18VkPhysicalDevice_TED2Ev called 3 returned 100% blocks executed 100%
        3:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIP23VkDescriptorSetLayout_TED2Ev:
function _ZNSt15__new_allocatorIP23VkDescriptorSetLayout_TED2Ev called 3 returned 100% blocks executed 100%
        3:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorI14VkDynamicStateED2Ev:
function _ZNSt15__new_allocatorI14VkDynamicStateED2Ev called 6 returned 100% blocks executed 100%
        6:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev called 3 returned 100% blocks executed 100%
        3:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorI23VkDeviceQueueCreateInfoED2Ev:
function _ZNSt15__new_allocatorI23VkDeviceQueueCreateInfoED2Ev called 1 returned 100% blocks executed 100%
        1:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev called 2 returned 100% blocks executed 100%
        2:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeIjEED2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeIjEED2Ev called 2 returned 100% blocks executed 100%
        2:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorI28VkDescriptorSetLayoutBindingED2Ev:
function _ZNSt15__new_allocatorI28VkDescriptorSetLayoutBindingED2Ev called 1 returned 100% blocks executed 100%
        1:  104:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:  105:
        -:  106:      pointer
        -:  107:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:  108:      { return std::__addressof(__x); }
        -:  109:
        -:  110:      const_pointer
        -:  111:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:  112:      { return std::__addressof(__x); }
        -:  113:#endif
        -:  114:
        -:  115:#if __has_builtin(__builtin_operator_new) >= 201802L
        -:  116:# define _GLIBCXX_OPERATOR_NEW __builtin_operator_new
        -:  117:# define _GLIBCXX_OPERATOR_DELETE __builtin_operator_delete
        -:  118:#else
        -:  119:# define _GLIBCXX_OPERATOR_NEW ::operator new
        -:  120:# define _GLIBCXX_OPERATOR_DELETE ::operator delete
        -:  121:#endif
        -:  122:
        -:  123:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:  124:      // about what the return value is when __n == 0.
        -:  125:      _GLIBCXX_NODISCARD _Tp*
      58*:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
      58*:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    #####:  139:	      std::__throw_bad_array_new_length();
    #####:  140:	    std::__throw_bad_alloc();
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
      58*:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        -:  152:      }
------------------
_ZNSt15__new_allocatorIP16VkDeviceMemory_TE8allocateEmPKv:
function _ZNSt15__new_allocatorIP16VkDeviceMemory_TE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorIPKcE8allocateEmPKv:
function _ZNSt15__new_allocatorIPKcE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
    #####:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  134-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
    #####:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  151-block 8
call    0 never executed
        -:  152:      }
------------------
_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE8allocateEmPKv:
function _ZNSt15__new_allocatorI18VkSurfaceFormatKHRE8allocateEmPKv called 3 returned 100% blocks executed 67%
        3:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        3:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        3:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        3:  151-block 8
call    0 returned 3
        -:  152:      }
------------------
_ZNSt15__new_allocatorI16VkPresentModeKHRE8allocateEmPKv:
function _ZNSt15__new_allocatorI16VkPresentModeKHRE8allocateEmPKv called 3 returned 100% blocks executed 67%
        3:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        3:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        3:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        3:  151-block 8
call    0 returned 3
        -:  152:      }
------------------
_ZNSt15__new_allocatorIjE8allocateEmPKv:
function _ZNSt15__new_allocatorIjE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
    #####:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  134-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
    #####:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  151-block 8
call    0 never executed
        -:  152:      }
------------------
_ZNSt15__new_allocatorI6VertexE8allocateEmPKv:
function _ZNSt15__new_allocatorI6VertexE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
    #####:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  134-block 4
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
    #####:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  151-block 8
call    0 never executed
        -:  152:      }
------------------
_ZNSt15__new_allocatorIP9VkImage_TE8allocateEmPKv:
function _ZNSt15__new_allocatorIP9VkImage_TE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorIP13VkImageView_TE8allocateEmPKv:
function _ZNSt15__new_allocatorIP13VkImageView_TE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorI28VkDescriptorSetLayoutBindingE8allocateEmPKv:
function _ZNSt15__new_allocatorI28VkDescriptorSetLayoutBindingE8allocateEmPKv called 3 returned 100% blocks executed 67%
        3:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        3:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        3:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        3:  151-block 8
call    0 returned 3
        -:  152:      }
------------------
_ZNSt15__new_allocatorIP17VkDescriptorSet_TE8allocateEmPKv:
function _ZNSt15__new_allocatorIP17VkDescriptorSet_TE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorI20VkWriteDescriptorSetE8allocateEmPKv:
function _ZNSt15__new_allocatorI20VkWriteDescriptorSetE8allocateEmPKv called 4 returned 100% blocks executed 67%
        4:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        4:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        4:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        4:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        4:  151-block 8
call    0 returned 4
        -:  152:      }
------------------
_ZNSt15__new_allocatorI14VkDynamicStateE8allocateEmPKv:
function _ZNSt15__new_allocatorI14VkDynamicStateE8allocateEmPKv called 2 returned 100% blocks executed 67%
        2:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        2:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        2:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        2:  151-block 8
call    0 returned 2
        -:  152:      }
------------------
_ZNSt15__new_allocatorIP15VkFramebuffer_TE8allocateEmPKv:
function _ZNSt15__new_allocatorIP15VkFramebuffer_TE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEmPKv:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorIP10VkBuffer_TE8allocateEmPKv:
function _ZNSt15__new_allocatorIP10VkBuffer_TE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeIjEE8allocateEmPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeIjEE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorIPvE8allocateEmPKv:
function _ZNSt15__new_allocatorIPvE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv:
function _ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorIP13VkSemaphore_TE8allocateEmPKv:
function _ZNSt15__new_allocatorIP13VkSemaphore_TE8allocateEmPKv called 2 returned 100% blocks executed 67%
        2:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        2:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        2:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        2:  151-block 8
call    0 returned 2
        -:  152:      }
------------------
_ZNSt15__new_allocatorIP9VkFence_TE8allocateEmPKv:
function _ZNSt15__new_allocatorIP9VkFence_TE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorI23VkDeviceQueueCreateInfoE8allocateEmPKv:
function _ZNSt15__new_allocatorI23VkDeviceQueueCreateInfoE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE8allocateEmPKv:
function _ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE8allocateEmPKv called 17 returned 100% blocks executed 67%
       17:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
       17:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
       17:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 17
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
       17:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       17:  151-block 8
call    0 returned 17
        -:  152:      }
------------------
_ZNSt15__new_allocatorI21VkExtensionPropertiesE8allocateEmPKv:
function _ZNSt15__new_allocatorI21VkExtensionPropertiesE8allocateEmPKv called 2 returned 100% blocks executed 67%
        2:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        2:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        2:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        2:  151-block 8
call    0 returned 2
        -:  152:      }
------------------
_ZNSt15__new_allocatorIcE8allocateEmPKv:
function _ZNSt15__new_allocatorIcE8allocateEmPKv called 2 returned 100% blocks executed 86%
        2:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        2:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
        -:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
        -:  139:	      std::__throw_bad_array_new_length();
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 5
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        2:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        2:  151-block 6
call    0 returned 2
        -:  152:      }
------------------
_ZNSt15__new_allocatorI17VkLayerPropertiesE8allocateEmPKv:
function _ZNSt15__new_allocatorI17VkLayerPropertiesE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv:
function _ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorIP23VkDescriptorSetLayout_TE8allocateEmPKv:
function _ZNSt15__new_allocatorIP23VkDescriptorSetLayout_TE8allocateEmPKv called 1 returned 100% blocks executed 67%
        1:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        1:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        1:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  151-block 8
call    0 returned 1
        -:  152:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIK12TEXTURE_TYPE7TextureEEE8allocateEmPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIK12TEXTURE_TYPE7TextureEEE8allocateEmPKv called 3 returned 100% blocks executed 67%
        3:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        3:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        3:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        3:  151-block 8
call    0 returned 3
        -:  152:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEmPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEmPKv called 2 returned 100% blocks executed 67%
        2:  126:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  127:      {
        -:  128:#if __cplusplus >= 201103L
        -:  129:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  130:	// 3308. std::allocator<void>().allocate(n)
        -:  131:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  132:#endif
        -:  133:
        2:  134:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  134-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  135:	  {
        -:  136:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  137:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  138:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  138-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:	      std::__throw_bad_array_new_length();
    %%%%%:  139-block 6
call    0 never executed
    #####:  140:	    std::__throw_bad_alloc();
    %%%%%:  140-block 7
call    0 never executed
        -:  141:	  }
        -:  142:
        -:  143:#if __cpp_aligned_new
        -:  144:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  145:	  {
        -:  146:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  147:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  148:							   __al));
        -:  149:	  }
        -:  150:#endif
        2:  151:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        2:  151-block 8
call    0 returned 2
        -:  152:      }
------------------
        -:  153:
        -:  154:      // __p is not permitted to be a null pointer.
        -:  155:      void
      47*:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
      47*:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        -:  173:      }
------------------
_ZNSt15__new_allocatorIP13VkSemaphore_TE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIP13VkSemaphore_TE10deallocateEPS1_m called 0 returned 0% blocks executed 0%
    #####:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
    #####:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  172-block 3
call    0 never executed
        -:  173:      }
------------------
_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE10deallocateEPS0_m:
function _ZNSt15__new_allocatorI18VkSurfaceFormatKHRE10deallocateEPS0_m called 3 returned 100% blocks executed 100%
        3:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        3:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        3:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        3:  172-block 3
call    0 returned 3
        -:  173:      }
------------------
_ZNSt15__new_allocatorI16VkPresentModeKHRE10deallocateEPS0_m:
function _ZNSt15__new_allocatorI16VkPresentModeKHRE10deallocateEPS0_m called 3 returned 100% blocks executed 100%
        3:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        3:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        3:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        3:  172-block 3
call    0 returned 3
        -:  173:      }
------------------
_ZNSt15__new_allocatorIcE10deallocateEPcm:
function _ZNSt15__new_allocatorIcE10deallocateEPcm called 2 returned 100% blocks executed 100%
        2:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        2:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        2:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        2:  172-block 3
call    0 returned 2
        -:  173:      }
------------------
_ZNSt15__new_allocatorI6VertexE10deallocateEPS0_m:
function _ZNSt15__new_allocatorI6VertexE10deallocateEPS0_m called 0 returned 0% blocks executed 0%
    #####:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
    #####:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  172-block 3
call    0 never executed
        -:  173:      }
------------------
_ZNSt15__new_allocatorIP9VkImage_TE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIP9VkImage_TE10deallocateEPS1_m called 0 returned 0% blocks executed 0%
    #####:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
    #####:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  172-block 3
call    0 never executed
        -:  173:      }
------------------
_ZNSt15__new_allocatorIP13VkImageView_TE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIP13VkImageView_TE10deallocateEPS1_m called 0 returned 0% blocks executed 0%
    #####:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
    #####:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  172-block 3
call    0 never executed
        -:  173:      }
------------------
_ZNSt15__new_allocatorI28VkDescriptorSetLayoutBindingE10deallocateEPS0_m:
function _ZNSt15__new_allocatorI28VkDescriptorSetLayoutBindingE10deallocateEPS0_m called 3 returned 100% blocks executed 100%
        3:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        3:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        3:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        3:  172-block 3
call    0 returned 3
        -:  173:      }
------------------
_ZNSt15__new_allocatorIP17VkDescriptorSet_TE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIP17VkDescriptorSet_TE10deallocateEPS1_m called 0 returned 0% blocks executed 0%
    #####:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
    #####:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  172-block 3
call    0 never executed
        -:  173:      }
------------------
_ZNSt15__new_allocatorI20VkWriteDescriptorSetE10deallocateEPS0_m:
function _ZNSt15__new_allocatorI20VkWriteDescriptorSetE10deallocateEPS0_m called 4 returned 100% blocks executed 100%
        4:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        4:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        4:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        4:  172-block 3
call    0 returned 4
        -:  173:      }
------------------
_ZNSt15__new_allocatorIP15VkFramebuffer_TE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIP15VkFramebuffer_TE10deallocateEPS1_m called 0 returned 0% blocks executed 0%
    #####:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
    #####:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  172-block 3
call    0 never executed
        -:  173:      }
------------------
_ZNSt15__new_allocatorIP10VkBuffer_TE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIP10VkBuffer_TE10deallocateEPS1_m called 0 returned 0% blocks executed 0%
    #####:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
    #####:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  172-block 3
call    0 never executed
        -:  173:      }
------------------
_ZNSt15__new_allocatorIP16VkDeviceMemory_TE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIP16VkDeviceMemory_TE10deallocateEPS1_m called 0 returned 0% blocks executed 0%
    #####:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
    #####:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  172-block 3
call    0 never executed
        -:  173:      }
------------------
_ZNSt15__new_allocatorIPvE10deallocateEPS0_m:
function _ZNSt15__new_allocatorIPvE10deallocateEPS0_m called 0 returned 0% blocks executed 0%
    #####:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
    #####:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  172-block 3
call    0 never executed
        -:  173:      }
------------------
_ZNSt15__new_allocatorIP17VkCommandBuffer_TE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIP17VkCommandBuffer_TE10deallocateEPS1_m called 0 returned 0% blocks executed 0%
    #####:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
    #####:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  172-block 3
call    0 never executed
        -:  173:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIK12TEXTURE_TYPE7TextureEEE10deallocateEPS6_m:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIK12TEXTURE_TYPE7TextureEEE10deallocateEPS6_m called 3 returned 100% blocks executed 100%
        3:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        3:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        3:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        3:  172-block 3
call    0 returned 3
        -:  173:      }
------------------
_ZNSt15__new_allocatorIP9VkFence_TE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIP9VkFence_TE10deallocateEPS1_m called 0 returned 0% blocks executed 0%
    #####:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
    #####:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  172-block 3
call    0 never executed
        -:  173:      }
------------------
_ZNSt15__new_allocatorI23VkDeviceQueueCreateInfoE10deallocateEPS0_m:
function _ZNSt15__new_allocatorI23VkDeviceQueueCreateInfoE10deallocateEPS0_m called 1 returned 100% blocks executed 100%
        1:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        1:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  172-block 3
call    0 returned 1
        -:  173:      }
------------------
_ZNSt15__new_allocatorIPKcE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIPKcE10deallocateEPS1_m called 0 returned 0% blocks executed 0%
    #####:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
    #####:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  172-block 3
call    0 never executed
        -:  173:      }
------------------
_ZNSt15__new_allocatorIjE10deallocateEPjm:
function _ZNSt15__new_allocatorIjE10deallocateEPjm called 0 returned 0% blocks executed 0%
    #####:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
    #####:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  172-block 3
call    0 never executed
        -:  173:      }
------------------
_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE10deallocateEPS0_m:
function _ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE10deallocateEPS0_m called 17 returned 100% blocks executed 100%
       17:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
       17:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
       17:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
       17:  172-block 3
call    0 returned 17
        -:  173:      }
------------------
_ZNSt15__new_allocatorI21VkExtensionPropertiesE10deallocateEPS0_m:
function _ZNSt15__new_allocatorI21VkExtensionPropertiesE10deallocateEPS0_m called 2 returned 100% blocks executed 100%
        2:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        2:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        2:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        2:  172-block 3
call    0 returned 2
        -:  173:      }
------------------
_ZNSt15__new_allocatorI17VkLayerPropertiesE10deallocateEPS0_m:
function _ZNSt15__new_allocatorI17VkLayerPropertiesE10deallocateEPS0_m called 1 returned 100% blocks executed 100%
        1:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        1:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  172-block 3
call    0 returned 1
        -:  173:      }
------------------
_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIP18VkPhysicalDevice_TE10deallocateEPS1_m called 1 returned 100% blocks executed 100%
        1:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        1:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  172-block 3
call    0 returned 1
        -:  173:      }
------------------
_ZNSt15__new_allocatorIP23VkDescriptorSetLayout_TE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIP23VkDescriptorSetLayout_TE10deallocateEPS1_m called 1 returned 100% blocks executed 100%
        1:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        1:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  172-block 3
call    0 returned 1
        -:  173:      }
------------------
_ZNSt15__new_allocatorI14VkDynamicStateE10deallocateEPS0_m:
function _ZNSt15__new_allocatorI14VkDynamicStateE10deallocateEPS0_m called 2 returned 100% blocks executed 100%
        2:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        2:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        2:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        2:  172-block 3
call    0 returned 2
        -:  173:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_m:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_m called 1 returned 100% blocks executed 100%
        1:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        1:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  172-block 3
call    0 returned 1
        -:  173:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS7_m:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS7_m called 2 returned 100% blocks executed 100%
        2:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        2:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        2:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        2:  172-block 3
call    0 returned 2
        -:  173:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeIjEE10deallocateEPS1_m:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeIjEE10deallocateEPS1_m called 1 returned 100% blocks executed 100%
        1:  156:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  156-block 2
        -:  157:      {
        -:  158:#if __cpp_sized_deallocation
        -:  159:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  160:#else
        -:  161:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  162:#endif
        -:  163:
        -:  164:#if __cpp_aligned_new
        -:  165:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  166:	  {
        -:  167:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  168:				     std::align_val_t(alignof(_Tp)));
        -:  169:	    return;
        -:  170:	  }
        -:  171:#endif
        1:  172:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  172-block 3
call    0 returned 1
        -:  173:      }
------------------
        -:  174:
        -:  175:#undef _GLIBCXX_SIZED_DEALLOC
        -:  176:#undef _GLIBCXX_OPERATOR_DELETE
        -:  177:#undef _GLIBCXX_OPERATOR_NEW
        -:  178:
        -:  179:#if __cplusplus <= 201703L
        -:  180:      __attribute__((__always_inline__))
        -:  181:      size_type
        -:  182:      max_size() const _GLIBCXX_USE_NOEXCEPT
     115*:  183:      { return _M_max_size(); }
        2:  183-block 4
        2:  183-block 5
       12:  183-block 4
       12:  183-block 5
        6:  183-block 4
        6:  183-block 5
        4:  183-block 4
        4:  183-block 5
        8:  183-block 4
        8:  183-block 5
        4:  183-block 4
        4:  183-block 5
        4:  183-block 4
        4:  183-block 5
        4:  183-block 4
        4:  183-block 5
        4:  183-block 4
        4:  183-block 5
        1:  183-block 4
        1:  183-block 5
        4:  183-block 4
        4:  183-block 5
        2:  183-block 4
        2:  183-block 5
        4:  183-block 4
        4:  183-block 5
        4:  183-block 4
        4:  183-block 5
        4:  183-block 4
        4:  183-block 5
    %%%%%:  183-block 4
    %%%%%:  183-block 5
    %%%%%:  183-block 4
    %%%%%:  183-block 5
       12:  183-block 4
       12:  183-block 5
       12:  183-block 4
       12:  183-block 5
    %%%%%:  183-block 4
    %%%%%:  183-block 5
        1:  183-block 4
        1:  183-block 5
        1:  183-block 4
        1:  183-block 5
        1:  183-block 4
        1:  183-block 5
        2:  183-block 4
        2:  183-block 5
        2:  183-block 4
        2:  183-block 5
       17:  183-block 4
       17:  183-block 5
        -:  184:
        -:  185:#if __cplusplus >= 201103L
        -:  186:      template<typename _Up, typename... _Args>
        -:  187:	__attribute__((__always_inline__))
        -:  188:	void
        -:  189:	construct(_Up* __p, _Args&&... __args)
        -:  190:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
      13*:  191:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
call    0 returned 1
call    1 returned 1
call    2 returned 2
        2:  191-block 10
call    3 returned 2
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:  191-block 12
call    7 returned 2
    $$$$$:  191-block 16
    $$$$$:  191-block 17
branch  8 never executed (fallthrough)
branch  9 never executed
    $$$$$:  191-block 18
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%:  191-block 17
    $$$$$:  191-block 18
    $$$$$:  191-block 19
branch 19 never executed (fallthrough)
branch 20 never executed
    $$$$$:  191-block 20
call   21 never executed
call   22 returned 1
call   23 returned 1
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 returned 1
call   29 returned 1
call   30 returned 2
call   31 returned 2
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 3
call   37 returned 3
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 returned 1
call   47 returned 1
call   48 never executed
call   49 never executed
        -:  192:
        -:  193:      template<typename _Up>
        -:  194:	__attribute__((__always_inline__))
        -:  195:	void
        -:  196:	destroy(_Up* __p)
        -:  197:	noexcept(std::is_nothrow_destructible<_Up>::value)
       6*:  198:	{ __p->~_Up(); }
call    0 returned 2
        -:  199:#else
        -:  200:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  201:      // 402. wrong new expression in [some_] allocator::construct
        -:  202:      __attribute__((__always_inline__))
        -:  203:      void
        -:  204:      construct(pointer __p, const _Tp& __val)
        -:  205:      { ::new((void *)__p) _Tp(__val); }
        -:  206:
        -:  207:      __attribute__((__always_inline__))
        -:  208:      void
        -:  209:      destroy(pointer __p) { __p->~_Tp(); }
        -:  210:#endif
        -:  211:#endif // ! C++20
        -:  212:
        -:  213:      template<typename _Up>
        -:  214:	friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR bool
        -:  215:	operator==(const __new_allocator&, const __new_allocator<_Up>&)
        -:  216:	_GLIBCXX_NOTHROW
        -:  217:	{ return true; }
        -:  218:
        -:  219:#if __cpp_impl_three_way_comparison < 201907L
        -:  220:      template<typename _Up>
        -:  221:	friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR bool
        -:  222:	operator!=(const __new_allocator&, const __new_allocator<_Up>&)
        -:  223:	_GLIBCXX_NOTHROW
        -:  224:	{ return false; }
        -:  225:#endif
        -:  226:
        -:  227:    private:
        -:  228:      __attribute__((__always_inline__))
        -:  229:      _GLIBCXX_CONSTEXPR size_type
        -:  230:      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  231:      {
        -:  232:#if __PTRDIFF_MAX__ < __SIZE_MAX__
     173*:  233:	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
        1:  233-block 2
        2:  233-block 2
        3:  233-block 2
        1:  233-block 2
        1:  233-block 2
        1:  233-block 2
        2:  233-block 2
        2:  233-block 2
       17:  233-block 2
        1:  233-block 2
        2:  233-block 2
        1:  233-block 2
        2:  233-block 2
        1:  233-block 2
        1:  233-block 2
        1:  233-block 2
        1:  233-block 2
        1:  233-block 2
        1:  233-block 2
        2:  233-block 2
        4:  233-block 2
       12:  233-block 2
        1:  233-block 2
        3:  233-block 2
        6:  233-block 2
        1:  233-block 2
        1:  233-block 2
    %%%%%:  233-block 2
    %%%%%:  233-block 2
        3:  233-block 2
        3:  233-block 2
    %%%%%:  233-block 2
        4:  233-block 2
        8:  233-block 2
        4:  233-block 2
        4:  233-block 2
        4:  233-block 2
        4:  233-block 2
        1:  233-block 2
        4:  233-block 2
        2:  233-block 2
        4:  233-block 2
        4:  233-block 2
        4:  233-block 2
    %%%%%:  233-block 2
    %%%%%:  233-block 2
       12:  233-block 2
       12:  233-block 2
    %%%%%:  233-block 2
        1:  233-block 2
        1:  233-block 2
        1:  233-block 2
        2:  233-block 2
        2:  233-block 2
       17:  233-block 2
        -:  234:#else
        -:  235:	return std::size_t(-1) / sizeof(_Tp);
        -:  236:#endif
        -:  237:      }
        -:  238:    };
        -:  239:
        -:  240:_GLIBCXX_END_NAMESPACE_VERSION
        -:  241:} // namespace
        -:  242:
        -:  243:#endif
