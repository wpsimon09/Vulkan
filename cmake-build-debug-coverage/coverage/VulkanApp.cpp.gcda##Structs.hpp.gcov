        -:    0:Source:/home/wpsimon09/Desktop/LearningVulkan/Vulkan/Includes/Structs.hpp
        -:    0:Graph:/home/wpsimon09/Desktop/LearningVulkan/Vulkan/cmake-build-debug-coverage/CMakeFiles/LearnVulkan.dir/Includes/VulkanApp.cpp.gcno
        -:    0:Data:/home/wpsimon09/Desktop/LearningVulkan/Vulkan/cmake-build-debug-coverage/CMakeFiles/LearnVulkan.dir/Includes/VulkanApp.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <vulkan/vulkan_core.h>
        -:    2:#define GLM_FORCE_DEFAULT_ALIGNED_GENTYPES
        -:    3:
        -:    4:
        -:    5:struct BufferCreateInfo {
        -:    6:    VkPhysicalDevice physicalDevice;
        -:    7:    VkSurfaceKHR surface;
        -:    8:    VkDevice logicalDevice;
        -:    9:    VkDeviceSize size;
        -:   10:    VkBufferUsageFlags usage;
        -:   11:    VkMemoryPropertyFlags properties;
        -:   12:};
        -:   13:
        -:   14:
        -:   15:enum APPLICATION_STATUS {
        -:   16:    IDLE = 0,
        -:   17:    RUNNING = 1,
        -:   18:    OFF = -1
        -:   19:};
        -:   20:
        -:   21:struct ApplicationStatusNotifier {
        -:   22:    APPLICATION_STATUS appStatus = RUNNING;
        -:   23:    bool isDirty = true;
        -:   24:
function _ZN25ApplicationStatusNotifier12NotifyChangeEv called 1576 returned 100% blocks executed 67%
     1576:   25:    void NotifyChange() {
     1576:   26:        if (isDirty) {
     1576:   26-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 1575
        1:   27:            std::cout << "Application is: ";
        1:   27-block 3
call    0 returned 1
        1:   28:            switch (appStatus) {
branch  0 taken 0
branch  1 taken 1
branch  2 taken 0
branch  3 taken 0
    #####:   29:                case IDLE: {
    #####:   30:                    std::cout << "Idle";
    %%%%%:   30-block 5
call    0 never executed
    #####:   31:                    break;
        -:   32:                }
        1:   33:                case RUNNING: {
        1:   34:                    std::cout << "Running";
        1:   34-block 7
call    0 returned 1
        1:   35:                    break;
        -:   36:                }
    #####:   37:                case OFF: {
    #####:   38:                    std::cout << "Off";
    %%%%%:   38-block 9
call    0 never executed
    #####:   39:                    break;
        -:   40:                }
        -:   41:            }
        1:   42:            std::cout << std::endl;
        1:   42-block 11
call    0 returned 1
        1:   43:            isDirty = false;
        -:   44:        }
     1576:   45:    }
        -:   46:};
        -:   47:
        -:   48:struct Vertex {
        -:   49:    glm::vec3 pos;
        -:   50:    glm::vec3 color;
        -:   51:    glm::vec3 normal;
        -:   52:    glm::vec2 uv;
        -:   53:
        -:   54:
        -:   55:
function _ZN6Vertex21getBindingDescriptionEv called 1 returned 100% blocks executed 100%
        1:   56:    static VkVertexInputBindingDescription getBindingDescription() {
        1:   57:        VkVertexInputBindingDescription bindingDescription{};
        -:   58:        //we will only use one binding
        -:   59:        //ths will be its index
        1:   60:        bindingDescription.binding = 0;
        -:   61:        //nubmer of bites between each data entry
        1:   62:        bindingDescription.stride = sizeof(Vertex);
        -:   63:        //move to the next vertex after each vertex not aftera each instance
        1:   64:        bindingDescription.inputRate = VK_VERTEX_INPUT_RATE_VERTEX;
        -:   65:
        1:   66:        return bindingDescription;
        1:   66-block 2
        -:   67:    }
        -:   68:
function _ZN6Vertex24getAttributeDescriptionsEv called 1 returned 100% blocks executed 100%
        1:   69:    static std::array<VkVertexInputAttributeDescription,4> getAttributeDescriptions() {
        -:   70:        std::array<VkVertexInputAttributeDescription,4> attributeDescriptions;
        -:   71:        //which vertex array binding to use
        1:   72:        attributeDescriptions[0].binding = 0;
        1:   72-block 2
call    0 returned 1
        -:   73:        //location in shader
        1:   74:        attributeDescriptions[0].location = 0;
call    0 returned 1
        -:   75:        //vec2 has 2 32-bit float components
        1:   76:        attributeDescriptions[0].format = VK_FORMAT_R32G32B32_SFLOAT;
call    0 returned 1
        -:   77:        //offset to the position
        1:   78:        attributeDescriptions[0].offset = offsetof(Vertex, pos);
call    0 returned 1
        -:   79:
        -:   80:        //which vertex array binding to use
        1:   81:        attributeDescriptions[1].binding = 0;
call    0 returned 1
        -:   82:        //location in shader
        1:   83:        attributeDescriptions[1].location = 1;
call    0 returned 1
        -:   84:        //vec2 has 2 32-bit float components
        1:   85:        attributeDescriptions[1].format = VK_FORMAT_R32G32B32_SFLOAT;
call    0 returned 1
        -:   86:        //offset to the position
        1:   87:        attributeDescriptions[1].offset = offsetof(Vertex, color);
call    0 returned 1
        -:   88:
        -:   89:        //which vertex array binding to use
        1:   90:        attributeDescriptions[2].binding = 0;
call    0 returned 1
        -:   91:        //location in shader
        1:   92:        attributeDescriptions[2].location = 2;
call    0 returned 1
        -:   93:        //vec2 has 2 32-bit float components
        1:   94:        attributeDescriptions[2].format = VK_FORMAT_R32G32B32_SFLOAT;
call    0 returned 1
        -:   95:        //offset to the position
        1:   96:        attributeDescriptions[2].offset = offsetof(Vertex, normal);
call    0 returned 1
        -:   97:
        -:   98:        //which vertex array binding to use
        1:   99:        attributeDescriptions[3].binding = 0;
call    0 returned 1
        -:  100:        //location in shader
        1:  101:        attributeDescriptions[3].location = 3;
call    0 returned 1
        -:  102:        //vec2 has 2 32-bit float components
        1:  103:        attributeDescriptions[3].format = VK_FORMAT_R32G32_SFLOAT;
call    0 returned 1
        -:  104:        //offset to the position
        1:  105:        attributeDescriptions[3].offset = offsetof(Vertex, uv);
call    0 returned 1
        -:  106:
        1:  107:        return attributeDescriptions;
        -:  108:    }
        -:  109:};
        -:  110:
        -:  111:struct QueueFamilyIndices {
        -:  112:    std::optional<uint32_t> graphicsFamily;
        -:  113:    std::optional<uint32_t> presentFamily;
        -:  114:    std::optional<uint32_t> transferFamily;
        -:  115:
function _ZNK18QueueFamilyIndices10isCompleteEv called 18 returned 100% blocks executed 90%
      18*:  116:    bool isComplete() const { return graphicsFamily.has_value() && presentFamily.has_value() && presentFamily.has_value();  }
       18:  116-block 2
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0
       18:  116-block 4
call    3 returned 18
branch  4 taken 18 (fallthrough)
branch  5 taken 0
       18:  116-block 6
call    6 returned 18
branch  7 taken 18 (fallthrough)
branch  8 taken 0
       18:  116-block 8
    %%%%%:  116-block 9
       18:  116-block 10
        -:  117:};
        -:  118:
        -:  119:struct SwapChainSupportDetails {
        -:  120:    VkSurfaceCapabilitiesKHR capabilities;
        -:  121:    std::vector<VkSurfaceFormatKHR> formats;
        -:  122:    std::vector<VkPresentModeKHR> presentModes;
        -:  123:};
        -:  124:
        -:  125:struct UniformBufferObject {
        -:  126:    alignas(16)glm::vec3 camPos;
        -:  127:    alignas(16)glm::mat4 model;
        -:  128:    alignas(16)glm::mat4 view;
        -:  129:    alignas(16)glm::mat4 projection;
        -:  130:    alignas(16)glm::mat4 normal;
        -:  131:};
        -:  132:
        -:  133:struct ImageCreateInfo {
        -:  134:    VkPhysicalDevice physicalDevice;
        -:  135:    VkSurfaceKHR surface;
        -:  136:    VkDevice logicalDevice;
        -:  137:    VkDeviceSize size;
        -:  138:    VkFormat format = VK_FORMAT_R8G8B8A8_SRGB;
        -:  139:    uint32_t width;
        -:  140:    uint32_t height;
        -:  141:    VkImageUsageFlags usage;
        -:  142:    VkMemoryPropertyFlags memoryProperteis = VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT;
        -:  143:    VkImageTiling imageTiling = VK_IMAGE_TILING_OPTIMAL;
        -:  144:};
        -:  145:
        -:  146:struct ImageLayoutDependencyInfo {
        -:  147:    VkDevice logicalDevice;
        -:  148:    VkCommandBuffer commandBuffer;
        -:  149:    VkQueue transformQueue;
        -:  150:};
        -:  151:
        -:  152:enum GEOMETRY_TYPE {
        -:  153:    PLANE = 0,
        -:  154:    CUBE = 1,
        -:  155:    SPHERE = 2,
        -:  156:};
        -:  157:
        -:  158:
